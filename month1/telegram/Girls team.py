import logging
from aiogram import Bot, Dispatcher, executor, types
import random
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
#from aiogram.types.inline_keyboard import InlineKeyboardButton, InlineKeyboardMarkup

markup = ReplyKeyboardMarkup()
markup.add(KeyboardButton('/start'), KeyboardButton('/help'), KeyboardButton('/adv'))

API_TOKEN = '5821815346:AAHCKz_zDtrGlDqaiBfarzNJlY0E3cJcqwc'


# messagemarkup = InlineKeyboardMarkup()
# messagemarkup.add(InlineKeyboardButton('–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ', callback_data='intel'),
#                   InlineKeyboardButton('—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ', callback_data='physic'),
#                   InlineKeyboardButton('—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ', callback_data='fun'))



LIST_COMMANDS = '''
/intelüìö - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π
/physicüí™üèª - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç–æ–π
/funü•≥ - –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–µ—Å–µ–ª—å—è
'''



# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

async def on_startup(_):
    print('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')

intel = {
  "—á–∏—Ç–∞–π": "–ø—Ä–æ—á–∏—Ç–∞–π –æ–¥–Ω—É —Å—Ç–∞—Ç—å—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
  "—Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ": "–≤—ã—É—á–∏ –æ–¥–Ω–æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ",
  "—à–∞—Ö–º–∞—Ç—ã": "–ø–æ–∏–≥—Ä–∞–π —à–∞—Ö–º–∞—Ç—ã —Å –±–æ—Ç–æ–º"
}

physic = {
    "–ø—Ä–∏—Å–µ–¥–∞–Ω–∏–µ": "—Å–¥–µ–ª–∞–π 20 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π",
    "–π–æ–≥–∞": "–ø–æ–¥–µ–ª–π –π–æ–≥—É 40 –º–∏–Ω—É—Ç",
    "–ø—Ä–æ–±–µ–∂–∫–∞": "–ø—Ä–æ–±–µ–∂–∫–∞ 30 –º–∏–Ω—É—Ç"
}

fun = {
    "–∫–∏–Ω–æ": "–ø–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–π –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º",
    "music": "–ø–æ—Å–ª—É—à–∞–π —Å–≤–æ—é –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É",
    "–∑–≤–æ–Ω–æ–∫ –¥—Ä—É–≥—É": "–ø–æ–∑–≤–æ–Ω–∏ –ª—É—á—à–µ–º—É –¥—Ä—É–≥—É"
}

#@dp.message_handler(commands=['start', 'help'])
#async def send_welcome(message: types.Message):
#    await message.answer('–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É "–≠—Ä—É–¥–∏—Ç"', reply_markup=markup)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(text=f'–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É{LIST_COMMANDS}', reply_markup=markup)

@dp.message_handler(commands=['help'])
async def send_welcome(message: types.Message):
    await message.answer(text='"–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n–¢—ã —Å–æ–≥–ª–∞—Å–µ–Ω? –¢–æ–≥–¥–∞ –Ω–∞–∂–º–∏ /start.")', reply_markup=markup)

@dp.message_handler(commands=['adv'])
async def send_welcome(message: types.Message):
    await message.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–µ–≤—á–æ–Ω–æ–∫ –≤–ø–µ—Ä–µ–¥! üëä', reply_markup=markup)
    await bot.send_sticker(message.from_user.id, sticker='CAACAgIAAxkBAAEIm05kO_VM7kobIm2lnv91GSyyZVxI3wACkRIAAvzw4UodOfjG8l2Msy8E')

# @dp.callback_query_handler()
# async def help_command(call: types.callback_query):
#     await bot.send_message(chat_id=call.from_user.id, )
#     # await call.answer()


@dp.message_handler(commands=['intel'])
async def help_command(message: types.Message):
    await message.answer(random.choice(list(intel.values())))

@dp.message_handler(commands=['physic'])
async def help_command(message: types.Message):
    await message.reply(random.choice(list(physic.values())))

@dp.message_handler(commands=['fun'])
async def help_command(message: types.Message):
    await message.reply(random.choice(list(fun.values())))
    if message == random.choice(list(fun["music"])):
        await bot.send_sticker(message.from_user.id, sticker='CAACAgIAAxkBAAEIm05kO_VM7kobIm2lnv91GSyyZVxI3wACkRIAAvzw4UodOfjG8l2Msy8E')







if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)



